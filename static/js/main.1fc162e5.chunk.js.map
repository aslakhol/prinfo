{"version":3,"sources":["Clock.js","APIControl.js","Bikes.js","Busses.js","controlled/ControlledBusses.js","WeatherUnit.js","Weather.js","controlled/ControlledWeather.js","DadJokes.js","controlled/ControlledDadJokes.js","App.js","serviceWorker.js","index.js"],"names":["Clock","dateTime","DateTime","local","setLocale","className","toLocaleString","TIME_24_SIMPLE","weekday","day","month","APIControlContext","EnturService","clientName","React","createContext","APIControlContextProvider","props","useState","refresh","setRefresh","useEffect","interval","setInterval","prevRefresh","clearInterval","Provider","value","children","service","Departure","departure","expectedDepartureTime","serviceJourney","departureTime","fromISO","timeTilDeparture","calculateTimeTilDeparture","journeyPattern","line","publicCode","now","minuteFloat","diff","toObject","minutes","flooredMinute","Math","floor","Busses","departures","setDepartures","departuresFromCenter","setDeparturesFromCenter","departuresToCenter","setDeparturesToCenter","getDeparturesFromStopPlace","then","data","filter","d","quay","id","slice","map","key","ControlledBusses","useContext","WeatherUnit","weather","symbol","precipitation","temperature","time","symbolNumber","number","iconUrl","readableTime","src","alt","weatherHourFormat","undefined","Weather","weatherApiResponse","setweatherApiResponse","threeHFromNow","sixHFromNow","setWeather","fetch","response","json","catch","err","console","error","createWeatherHour","segment","to","location","product","times","firstTime","timeInThree","plus","hour","timeInSix","equals","createWeather","class","ControlledWeather","DadJokes","joke","setJoke","title","selftext","ControlledDadJokes","App","APIControl","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1fc162e5.chunk.js","sourcesContent":["import React from \"react\";\nimport { DateTime } from \"luxon\";\n\nconst Clock = () => {\n  const dateTime = DateTime.local().setLocale(\"nb-NO\");\n\n  return (\n    <div className=\"clock\">\n      <h1 className=\"time\">\n        {dateTime.toLocaleString(DateTime.TIME_24_SIMPLE)}\n      </h1>\n      <h1 className=\"date\">\n        {dateTime.toLocaleString({\n          weekday: \"long\",\n          day: \"numeric\",\n          month: \"long\",\n        })}\n      </h1>\n    </div>\n  );\n};\n\nexport default Clock;\n","import React, { useState, useEffect } from \"react\";\n\nexport const APIRefreshDelay = 3000;\n\nexport const APIControlContext = React.createContext(1);\n\nconst APIControlContextProvider = (props) => {\n  const [refresh, setRefresh] = useState(1);\n\n  const refreshAPIData = () => {\n    setRefresh((prevRefresh) => prevRefresh * -1);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshAPIData();\n    }, APIRefreshDelay);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <APIControlContext.Provider value={{ refresh }}>\n      {props.children}\n    </APIControlContext.Provider>\n  );\n};\n\nexport default APIControlContextProvider;\n","import React, { useState, useEffect } from \"react\";\nimport EnturService from \"@entur/sdk\";\n\nconst service = new EnturService({ clientName: \"hollund-prinfo\" });\n\nconst BikeStations = (props) => {\n  const [bikeStations, setBikeStations] = useState([]);\n  const { refresh } = props;\n\n  useEffect(() => {\n    service\n      .getBikeRentalStations([\n        \"YTR:VehicleSharingParkingArea:180\",\n        \"YTR:VehicleSharingParkingArea:94\",\n        \"YTR:VehicleSharingParkingArea:133\",\n        \"YTR:VehicleSharingParkingArea:123\",\n        \"YTR:VehicleSharingParkingArea:41\",\n      ])\n      .then((data) => setBikeStations(data));\n  }, [refresh]);\n\n  return (\n    <div className=\"bikes\">\n      <h2>Bysykkel</h2>\n      {bikeStations.map((station) => (\n        <Station key={station.id} station={station} />\n      ))}\n    </div>\n  );\n};\n\nconst Station = (props) => {\n  const { station } = props;\n  return (\n    <div className=\"station\">\n      {station.name} - {station.bikesAvailable} : {station.spacesAvailable}\n    </div>\n  );\n};\n\nexport default BikeStations;\n","import React, { useState, useEffect } from \"react\";\nimport EnturService from \"@entur/sdk\";\nimport { DateTime } from \"luxon\";\n\nconst service = new EnturService({ clientName: \"hollund-prinfo\" });\n\nconst Busses = (props) => {\n  const [departures, setDepartures] = useState([]);\n  const [departuresFromCenter, setDeparturesFromCenter] = useState([]);\n  const [departuresToCenter, setDeparturesToCenter] = useState([]);\n  const { refresh } = props;\n\n  const id = \"NSR:StopPlace:43666\";\n\n  const fromCenter = \"NSR:Quay:74952\";\n  const toCenter = \"NSR:Quay:74954\";\n\n  const size = 6;\n\n  useEffect(() => {\n    service.getDeparturesFromStopPlace(id).then((data) => setDepartures(data));\n  }, [refresh]);\n\n  useEffect(() => {\n    setDeparturesFromCenter(departures.filter((d) => d.quay.id === fromCenter));\n    setDeparturesToCenter(departures.filter((d) => d.quay.id === toCenter));\n  }, [departures]);\n\n  return (\n    <div className=\"busses\">\n      <div className=\"from\">\n        <h2>Fra Sentrum</h2>\n        {departuresFromCenter.slice(0, size).map((departure) => (\n          <Departure key={departure.serviceJourney.id} departure={departure} />\n        ))}\n      </div>\n      <div className=\"towards\">\n        <h2>Mot Sentrum</h2>\n        {departuresToCenter.slice(0, size).map((departure) => (\n          <Departure key={departure.serviceJourney.id} departure={departure} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Departure = (props) => {\n  const { departure } = props;\n  const { expectedDepartureTime, serviceJourney } = departure;\n  const departureTime = DateTime.fromISO(expectedDepartureTime);\n  const timeTilDeparture = calculateTimeTilDeparture(departureTime);\n  return (\n    <div className=\"departure\">\n      # {serviceJourney.journeyPattern.line.publicCode} - {timeTilDeparture}\n    </div>\n  );\n};\n\nconst calculateTimeTilDeparture = (departureTime) => {\n  const now = DateTime.local();\n  const diff = departureTime.diff(now, \"minutes\");\n  const minuteFloat = diff.toObject().minutes;\n  const flooredMinute = Math.floor(minuteFloat);\n  const semanticTimeToDeparture =\n    flooredMinute === 0 ? \"Nå\" : flooredMinute + \" min\";\n  return semanticTimeToDeparture;\n};\n\nexport default Busses;\n","import React, { useContext } from \"react\";\nimport Busses from \"../Busses\";\nimport { APIControlContext } from \"../APIControl\";\n\nconst ControlledBusses = () => {\n  const { refresh } = useContext(APIControlContext);\n\n  return <Busses refresh={refresh}></Busses>;\n};\n\nexport default ControlledBusses;\n","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\nconst WeatherUnit = (props) => {\n  if (props.weather) {\n    const { symbol, precipitation, temperature, time } = props.weather;\n    const symbolNumber = symbol.number ? symbol.number : 1;\n    const iconUrl = `https://api.met.no/weatherapi/weathericon/1.1/?symbol=${symbolNumber}&content_type=image/png`;\n    const readableTime = DateTime.fromISO(time).toLocaleString(\n      DateTime.TIME_24_SIMPLE\n    );\n\n    return (\n      <div className=\"weather-unit\">\n        <h2>{readableTime} </h2>\n        <span>{temperature}°C</span>\n        <img src={iconUrl} alt={symbol.id} />\n        <span>{precipitation}mm </span>\n      </div>\n    );\n  } else {\n    return <></>;\n  }\n};\n\nexport default WeatherUnit;\n","import React, { useState, useEffect } from \"react\";\nimport { DateTime } from \"luxon\";\n\nimport WeatherUnit from \"./WeatherUnit\";\n\nconst weatherUrl =\n  \"https://api.met.no/weatherapi/locationforecast/1.9/.json?lat=63.413716&lon=10.416851\";\n\nconst weatherHourFormat = {\n  time: undefined,\n  temperature: undefined,\n  symbol: { symbol: undefined, id: undefined },\n  precipitation: undefined,\n};\n\nconst Weather = (props) => {\n  const [weatherApiResponse, setweatherApiResponse] = useState({});\n  const [weather, setWeather] = useState({\n    now: weatherHourFormat,\n    threeHFromNow: weatherHourFormat,\n    sixHFromNow: weatherHourFormat,\n  });\n  const { refresh } = props;\n\n  const getWeather = () => {\n    fetch(weatherUrl)\n      .then((response) => response.json())\n      .then((json) => setweatherApiResponse(json))\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(() => {\n    getWeather();\n  }, [refresh]);\n\n  useEffect(() => {\n    const createWeatherHour = (segment) => {\n      return {\n        time: segment[0].to,\n        temperature: segment[0].location.temperature.value,\n        symbol: segment[1].location.symbol,\n        precipitation: segment[1].location.precipitation.value,\n      };\n    };\n\n    const createWeather = (times) => {\n      const firstTime = DateTime.fromISO(times[0].to);\n      const timeInThree = firstTime.plus({ hour: 3 });\n      const timeInSix = firstTime.plus({ hour: 6 });\n\n      const now = createWeatherHour(\n        times\n          .slice(0, 25)\n          .filter((time) => DateTime.fromISO(time.to).equals(firstTime))\n      );\n      const threeHFromNow = createWeatherHour(\n        times\n          .slice(0, 25)\n          .filter((time) => DateTime.fromISO(time.to).equals(timeInThree))\n      );\n      const sixHFromNow = createWeatherHour(\n        times\n          .slice(0, 25)\n          .filter((time) => DateTime.fromISO(time.to).equals(timeInSix))\n      );\n      return { now, threeHFromNow, sixHFromNow };\n    };\n\n    if (weatherApiResponse.product) {\n      const time = weatherApiResponse.product.time;\n      setWeather(createWeather(time));\n    }\n  }, [weatherApiResponse]);\n\n  return (\n    <div className=\"weather\">\n      <WeatherUnit class=\"now\" weather={weather.now}></WeatherUnit>\n      <WeatherUnit\n        class=\"threeHFromNow\"\n        weather={weather.threeHFromNow}\n      ></WeatherUnit>\n      <WeatherUnit\n        class=\"sixHFromNow\"\n        weather={weather.sixHFromNow}\n      ></WeatherUnit>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { useContext } from \"react\";\nimport Weather from \"../Weather\";\nimport { APIControlContext } from \"../APIControl\";\n\nconst ControlledWeather = () => {\n  const { refresh } = useContext(APIControlContext);\n\n  return <Weather refresh={refresh}></Weather>;\n};\n\nexport default ControlledWeather;\n","import React, { useState, useEffect } from \"react\";\n\nconst timeUrl = \"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\";\n\nconst DadJokes = (props) => {\n  const [joke, setJoke] = useState({});\n  const { refresh } = props;\n\n  const getJoke = () => {\n    fetch(timeUrl)\n      .then((response) => response.json())\n      .then((json) => setJoke(json.data.children[0].data))\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(() => {\n    getJoke();\n  }, [refresh]);\n\n  return joke.title ? (\n    <div className=\"joke\">\n      <p>{joke.title}</p>\n      <p>{joke.selftext}</p>\n    </div>\n  ) : (\n    <></>\n  );\n};\n\nexport default DadJokes;\n","import React, { useContext } from \"react\";\nimport DadJokes from \"../DadJokes\";\nimport { APIControlContext } from \"../APIControl\";\n\nconst ControlledDadJokes = () => {\n  const { refresh } = useContext(APIControlContext);\n\n  return <DadJokes refresh={refresh}></DadJokes>;\n};\n\nexport default ControlledDadJokes;\n","import React from \"react\";\nimport Clock from \"./Clock\";\nimport ControlledBikes from \"./controlled/ControlledBikes\";\nimport ControlledBusses from \"./controlled/ControlledBusses\";\nimport ControlledWeather from \"./controlled/ControlledWeather\";\nimport ControlledDadJokes from \"./controlled/ControlledDadJokes\";\nimport APIControlContextProvider from \"./APIControl\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <APIControlContextProvider>\n      <div className=\"wrapper\">\n        <Clock />\n        <ControlledBusses />\n        {/* <ControlledBikes /> */}\n        <ControlledWeather />\n        <ControlledDadJokes />\n      </div>\n    </APIControlContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}